package br.com.coldigogeladeiras.jdbc;

import java.util.List;

import com.google.gson.JsonObject;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;

import br.com.coldigogeladeiras.modelo.Marca;
import br.com.coldigogeladeiras.jdbcinterface.MarcaDAO;

public class JDBCMarcaDAO implements MarcaDAO {
	
	private Connection conexao;
	
	public JDBCMarcaDAO (Connection conexao) {
		this.conexao = conexao;
	}
	
	public boolean inserir(Marca marca) {
		
		String comando = "INSERT INTO marcas "
				+ "(id, nome) "
				+ "VALUES (?,?)";
		PreparedStatement p;
		
		try {
			
			p = this.conexao.prepareStatement(comando);
			
			p.setInt(1, marca.getId());
			p.setString(2, marca.getNome());
			
			p.execute();
			
		}catch(SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public List<Marca> carregar() {
		
		//Criação da instrução SQL para busca de todas as marcas
		String comando = "SELECT * FROM marcas";
				
		//Criação de uma lista para armazenar cada marca encontrada
		List<Marca> listMarcas = new ArrayList<Marca>();
				
		//Criação do objeto marca com valor null (ou seja, sem instanciá-lo)
		Marca marca = null;
				
		//Abertura do try-catch
		try {
					
			//Uso da conexão do banco para prepará-lo para uma instrução SQL
			Statement stmt = conexao.createStatement();
					
			//Execução da instrução criada previamente
			//e armazenamento do resultado no objeto rs
			ResultSet rs = stmt.executeQuery(comando);
					
			//Enquanto houver uma próxima linha no resultado
			while (rs.next()) {
						
				//Criação de instância da classe Marca
				marca = new Marca();
						
				//Recebimento dos 2 dados retornados do BD para cada linha encontrada
				int id = rs.getInt("id");
				String nome = rs.getString("nome");
						
				//Setando no objeto marca os valores encontrados
				marca.setId(id);
				marca.setNome(nome);
						
				//Adição da instância contida no objeto Marca na lista de marcas
				listMarcas.add(marca);
			}
					
			//Caso alguma Exception seja gerada no try, recebe-a no objeto "ex"
			} catch (Exception ex) {
				//Exibe a exceção no console
				ex.printStackTrace();
			}

			//Retorna para quem chamou o método a lista criada
		return listMarcas;	
	}
	
	public boolean deletar(int id) {
		String comando = "DELETE FROM marcas WHERE id = ?";
		PreparedStatement p;
		
		try {
			p = this.conexao.prepareStatement(comando);
			p.setInt(1, id);
			p.execute();
		}catch(SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public String consultaExclusao (int id ) {
		String comando = "SELECT id FROM tabela WHERE id = ?";
		
		try {
			PreparedStatement p = conexao.prepareStatement(comando);
			p.setInt(1, id);
			ResultSet rs = preparedStatement.executeQuery();			
			if(rs.next()) {
				//O registro existe no banco de dados, você pode prosseguir com a exclusão
				
				String msg = ""
			}else {
				//O registro não foi encontrado no banco de dados.
				
			}
		}catch(SQLException e) {
			
		}
		
	}
	
	public List<JsonObject> buscar(String nome) {
		
		String comando = "SELECT * FROM marcas ";
		
		if(!nome.equals("")) {
			comando += "WHERE nome LIKE '%" + nome + "%' ";
		}
		
		comando += "ORDER BY nome ASC";
		
		List<JsonObject> listaMarcas = new ArrayList<JsonObject>();
		JsonObject marca = null;
		
		try {
			Statement stmt = conexao.createStatement();
			ResultSet rs = stmt.executeQuery(comando);
			
			while (rs.next()) {
				
				int id = rs.getInt("id");
				String nomeMarca = rs.getString("nome");
				
				marca = new JsonObject();
				marca.addProperty("id", id);
				marca.addProperty("nome", nomeMarca);
				
				listaMarcas.add(marca);
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return listaMarcas;
	}

	public Marca buscarPorId(int id) {
		String comando = "SELECT * FROM marcas WHERE marcas.id = ?";
		Marca marca = new Marca();
		
		try {
			PreparedStatement p = this.conexao.prepareStatement(comando);
			p.setInt(1, id);
			ResultSet rs = p.executeQuery();
			while (rs.next()) {
				
				String nomeMarca = rs.getString("nome");
				
				marca.setId(id);
				marca.setNome(nomeMarca);
				
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return marca;
	}
	
	public boolean alterar(Marca marca) {
		
		String comando = "UPDATE marcas SET nome=? WHERE id=?";
		PreparedStatement p;
		
		try {
			p = this.conexao.prepareStatement(comando);
			p.setString(1, marca.getNome());
			p.setInt(2, marca.getId());
			p.executeUpdate();
		}catch(SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
}
